uint32_t address_bits() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_ADDRESS_BITS); }
bool available() const { return device_get_info_<bool >(id_, CL_DEVICE_AVAILABLE); }
bool compiler_available() const { return device_get_info_<bool >(id_, CL_DEVICE_COMPILER_AVAILABLE); }
bool endian_little() const { return device_get_info_<bool >(id_, CL_DEVICE_ENDIAN_LITTLE); }
bool error_correction_support() const { return device_get_info_<bool >(id_, CL_DEVICE_ERROR_CORRECTION_SUPPORT); }
std::string extensions() const { return device_get_info_<std::string >(id_, CL_DEVICE_EXTENSIONS); }
uint64_t global_mem_cache_size() const { return device_get_info_<uint64_t >(id_, CL_DEVICE_GLOBAL_MEM_CACHE_SIZE); }
uint32_t global_mem_cacheline_size() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE); }
uint64_t global_mem_size() const { return device_get_info_<uint64_t >(id_, CL_DEVICE_GLOBAL_MEM_SIZE); }
bool image_support() const { return device_get_info_<bool >(id_, CL_DEVICE_IMAGE_SUPPORT); }
std::size_t image2d_max_height() const { return device_get_info_<std::size_t >(id_, CL_DEVICE_IMAGE2D_MAX_HEIGHT); }
std::size_t image2d_max_width() const { return device_get_info_<std::size_t >(id_, CL_DEVICE_IMAGE2D_MAX_WIDTH); }
std::size_t image3d_max_depth() const { return device_get_info_<std::size_t >(id_, CL_DEVICE_IMAGE3D_MAX_DEPTH); }
std::size_t image3d_max_height() const { return device_get_info_<std::size_t >(id_, CL_DEVICE_IMAGE3D_MAX_HEIGHT); }
uint64_t local_mem_size() const { return device_get_info_<uint64_t >(id_, CL_DEVICE_LOCAL_MEM_SIZE); }
uint32_t max_clock_frequency() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MAX_CLOCK_FREQUENCY); }
uint32_t max_compute_units() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MAX_COMPUTE_UNITS); }
uint32_t max_constant_args() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MAX_CONSTANT_ARGS); }
uint32_t max_constant_buffer_size() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE); }
uint64_t max_mem_alloc_size() const { return device_get_info_<uint64_t >(id_, CL_DEVICE_MAX_MEM_ALLOC_SIZE); }
std::size_t max_parameter_size() const { return device_get_info_<std::size_t >(id_, CL_DEVICE_MAX_PARAMETER_SIZE); }
uint32_t max_read_image_args() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MAX_READ_IMAGE_ARGS); }
uint32_t max_samplers() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MAX_SAMPLERS); }
std::size_t max_work_group_size() const { return device_get_info_<std::size_t >(id_, CL_DEVICE_MAX_WORK_GROUP_SIZE); }
uint32_t max_work_item_dimensions() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS); }
uint32_t max_write_image_args() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MAX_WRITE_IMAGE_ARGS); }
uint32_t mem_base_addr_align() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MEM_BASE_ADDR_ALIGN); }
uint32_t min_data_type_align_size() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE); }
std::string name() const { return device_get_info_<std::string >(id_, CL_DEVICE_NAME); }
uint32_t preferred_vector_width_char() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR); }
uint32_t preferred_vector_width_short() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT); }
uint32_t preferred_vector_width_int() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT); }
uint32_t preferred_vector_width_long() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG); }
uint32_t preferred_vector_width_float() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT); }
uint32_t preferred_vector_width_double() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE); }
std::string profile() const { return device_get_info_<std::string >(id_, CL_DEVICE_PROFILE); }
std::size_t profiling_timer_resolution() const { return device_get_info_<std::size_t >(id_, CL_DEVICE_PROFILING_TIMER_RESOLUTION); }
std::string vendor() const { return device_get_info_<std::string >(id_, CL_DEVICE_VENDOR); }
uint32_t vendor_id() const { return device_get_info_<uint32_t >(id_, CL_DEVICE_VENDOR_ID); }
std::string version() const { return device_get_info_<std::string >(id_, CL_DEVICE_VERSION); }
std::string cl_driver_version() const { return device_get_info_<std::string >(id_, CL_DRIVER_VERSION); }
